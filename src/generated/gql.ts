/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query Characters {\n  characters {\n      characterAccount {\n        id\n        contractAddress\n      }\n      nft {\n        id\n        creator\n        owner {\n            address\n        }\n        tokenId\n        tokenURI\n        contractAddress\n        category\n        amount\n        rarity\n        orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n        }\n        activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        searchOwner\n      }\n      attributes {\n        attribute\n        value\n      }\n      level\n      exp\n  }\n  treasureAccounts {\n      treasure {\n        tokenId\n        tokenURI\n        nft {\n            id\n            tokenId\n            tokenURI\n            contractAddress\n            category\n            amount\n            rarity\n            orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n            bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n            }\n            activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n        }\n      }\n      balance\n  }\n  items {\n    nft {\n      id\n      creator\n      owner {\n        address\n      }\n      tokenId\n      tokenURI\n      contractAddress\n      category\n      amount\n      rarity\n      orders {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n      bids {\n        id\n        category\n        tokenId\n        bidder\n        seller\n        price\n        status\n        expiresAt\n        createdAt\n        updatedAt\n      }\n      activeOrder {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n    }\n    attributes {\n      attribute\n      value\n      isIncrease\n      isPercentage\n    } \n  }\n}\n": types.CharactersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Characters {\n  characters {\n      characterAccount {\n        id\n        contractAddress\n      }\n      nft {\n        id\n        creator\n        owner {\n            address\n        }\n        tokenId\n        tokenURI\n        contractAddress\n        category\n        amount\n        rarity\n        orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n        }\n        activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        searchOwner\n      }\n      attributes {\n        attribute\n        value\n      }\n      level\n      exp\n  }\n  treasureAccounts {\n      treasure {\n        tokenId\n        tokenURI\n        nft {\n            id\n            tokenId\n            tokenURI\n            contractAddress\n            category\n            amount\n            rarity\n            orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n            bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n            }\n            activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n        }\n      }\n      balance\n  }\n  items {\n    nft {\n      id\n      creator\n      owner {\n        address\n      }\n      tokenId\n      tokenURI\n      contractAddress\n      category\n      amount\n      rarity\n      orders {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n      bids {\n        id\n        category\n        tokenId\n        bidder\n        seller\n        price\n        status\n        expiresAt\n        createdAt\n        updatedAt\n      }\n      activeOrder {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n    }\n    attributes {\n      attribute\n      value\n      isIncrease\n      isPercentage\n    } \n  }\n}\n"): (typeof documents)["\n  query Characters {\n  characters {\n      characterAccount {\n        id\n        contractAddress\n      }\n      nft {\n        id\n        creator\n        owner {\n            address\n        }\n        tokenId\n        tokenURI\n        contractAddress\n        category\n        amount\n        rarity\n        orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n        }\n        activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n        }\n        searchOwner\n      }\n      attributes {\n        attribute\n        value\n      }\n      level\n      exp\n  }\n  treasureAccounts {\n      treasure {\n        tokenId\n        tokenURI\n        nft {\n            id\n            tokenId\n            tokenURI\n            contractAddress\n            category\n            amount\n            rarity\n            orders {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n            bids {\n            id\n            category\n            tokenId\n            bidder\n            seller\n            price\n            status\n            expiresAt\n            createdAt\n            updatedAt\n            }\n            activeOrder {\n            id\n            category\n            tokenId\n            transactionHash\n            owner\n            buyer\n            price\n            status\n            createdAt\n            expiresAt\n            updatedAt\n            }\n        }\n      }\n      balance\n  }\n  items {\n    nft {\n      id\n      creator\n      owner {\n        address\n      }\n      tokenId\n      tokenURI\n      contractAddress\n      category\n      amount\n      rarity\n      orders {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n      bids {\n        id\n        category\n        tokenId\n        bidder\n        seller\n        price\n        status\n        expiresAt\n        createdAt\n        updatedAt\n      }\n      activeOrder {\n        id\n        category\n        tokenId\n        transactionHash\n        owner\n        buyer\n        price\n        status\n        createdAt\n        expiresAt\n        updatedAt\n      }\n    }\n    attributes {\n      attribute\n      value\n      isIncrease\n      isPercentage\n    } \n  }\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;